from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile
from data_base.dao import set_user, get_all_users, get_user_by_id
from keyboards.reply_other_kb import *
from utils.utils import get_content_info, send_message_user
from create_bot import bot
from aiogram.utils.chat_action import ChatActionSender


start_router = Router()

class Form(StatesGroup):
    name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏

def call_answer_file(name: str) -> str:
    text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å"
    
    with open(f'./temp_answers/{name}', 'r', encoding='utf-8') as f:
        text = f.read()
    return text

@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user = None # await cheak_user(tg_id=message.from_user.id,
                        #   username=message.from_user.username,
                        #   full_name=message.from_user.full_name)
    greeting = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    # if user is None:
    #     ans = call_answer_file('start')
        
        
    #     await message.answer(ans, reply_markup=main_register)
    # else:
    #     await message.answer(greeting, reply_markup=main_kb())
    ans = call_answer_file('start')    
    await message.answer(ans, reply_markup=main_register())

@start_router.message(F.text == '–ó–∞–ø–∏—Å—å –Ω–∞ –ú–ê–°–¢–ï–†-–ö–õ–ê–°–°')
async def master_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'–ó–∞–ø–∏—Å—å –Ω–∞ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –ª–∏—á–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ - @FestBotAssistant',
                            reply_markup=main_kb())
        
        
@start_router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user_by_id(message.from_user.id)
    print(f'user{message.from_user.id}::', user)
    
    try:
        await message.answer(f'–¢–≤–æ–π id: {user['member_id']} \n–¢–≤–æ–π —Å—á—ë—Ç: {user['score']} \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
                            reply_markup=main_kb())
    except Exception as e:
        print('total error::', e)
        await message.answer(f'–¢–≤–æ–π id: 0000 \n–¢–≤–æ–π —Å—á—ë—Ç: 0',
                            reply_markup=main_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
@start_router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(name=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    user_id = await set_user(tg_id=message.from_user.id,
                          username=message.from_user.username,
                          full_name=name)
    # print('user::', user)
    ans = f"{name}, –≤–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å! \n –¢–µ–±–µ –ø—Ä–∏—Å–≤–æ–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID {user_id} , –∑–∞–ø–æ–º–Ω–∏ –µ–≥–æ!\nID –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –∫–≤–µ—Å—Ç–µ. \n–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\""
    
    await message.answer(ans, reply_markup=main_kb_2())
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@start_router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def start_register(message: Message, state: FSMContext):
    await state.clear()
    ans = f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤)"
    
    await state.set_state(Form.name)
    await message.answer(ans,
        reply_markup=None)


@start_router.message(F.text == '–ö–∞—Ä—Ç–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def start_map(message: Message, state: FSMContext):
    await state.clear()
    
    text = call_answer_file('rasp')
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    photo_path = "map.png"
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    photo = FSInputFile(photo_path)
    
    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=map_kb()
    )

@start_router.message(F.text == '–õ–µ–≥–µ–Ω–¥–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞')
async def start_legends(message: Message, state: FSMContext):
    await state.clear()
    text = call_answer_file('legends')
    await message.answer(text,
                        reply_markup=legend_kb())


def call_stations():
    # questions = {1: {'qst': '–°—Ç–æ–ª–∏—Ü–∞ –ò—Ç–∞–ª–∏–∏?', 'answer': '–†–∏–º'}}
    buttons = {}
    with open('./temp_answers/stations_buttons', 'r', encoding='utf-8') as f:
        data = f.readlines()
    
    with open('./temp_answers/stations_info', 'r', encoding='utf-8') as f:
        data_info = f.readlines()
        
    for i, ans in enumerate(data):
        buttons[i] = {'qst':ans, 'answer':data_info[i]}
    
    return buttons

@start_router.message(F.text == '–°—Ç–∞–Ω—Ü–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º')
async def start_stations(message: Message, state: FSMContext):
    await state.clear()
    text = call_answer_file('stations')
    # text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–æ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ \nüé° –°—Ç–∞–Ω—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å–µ—â–∞—Ç—å –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ ‚Äî –∫–∞–∫ –¥—É—à–µ —É–≥–æ–¥–Ω–æ! \n –£—á–∞—Å—Ç–≤—É–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏!'
    questions = call_stations()
    
    await message.answer(text, reply_markup=create_qst_inline_kb(questions))


@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    
    questions = call_stations()

    qst_data = questions[qst_id]
    msg_text = f'{qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        # await asyncio.sleep(2)
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        photo_path = "map.png"
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
        photo = FSInputFile(photo_path)
        
        await call.message.answer_photo(
            photo=photo,
            caption=msg_text,
            reply_markup=create_qst_inline_kb(questions)
        )
        # await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))


 
@start_router.message(F.text == 'FAQ')
async def start_faq(message: Message, state: FSMContext):
    await state.clear()
    ans = call_answer_file('faq')
    await message.answer(ans,
                        reply_markup=main_kb_2())   


@start_router.message(F.text == '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
async def start_table(message: Message, state: FSMContext):
    await state.clear()
    users = await get_all_users()
    current_user = await get_user_by_id(message.from_user.id)
    # print("users::::::::", users)
    str_val = "30 –ª—É—á—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: \n"
    for user in users:
        # print("user::::::::", user)
        str_val += f"{user['full_name']} | {user['member_id']} | {user['score']} \n\n"
    str_val += "–ù–µ –Ω–∞—à–ª–∏ —Å–µ–±—è? –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –≤ —Ç–æ–ø-30.\n\n"
    
    if user != None:
        str_val += f"–õ–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n {current_user['member_id']} | {current_user['full_name']} | {current_user['score']} \n\n–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è—Ö –∫–≤–µ—Å—Ç–∞!\n–¢–û–ü - 30 –ø–æ –∏—Ç–æ–≥–∞–º –¥–Ω—è –ø–æ–ª—É—á–∞—é—Ç —Ü–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏!"
    
    await message.answer(str_val, reply_markup=main_kb_2())   



# @start_router.message(F.text == 'DeleteDataBase')
# async def stop_fsm(message: Message, state: FSMContext):
#     await state.clear()
#     # await delete_all_users()
#     await message.answer(f"–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ",
#                         reply_markup=main_kb())


@start_router.message(F.text == '–ö–≤–µ—Å—Ç')
async def quest_0(message: Message, state: FSMContext):
    await state.clear()
    text = "–£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–∏ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ! \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"
    
    await message.answer(text, reply_markup=quest_kb())

# @start_router.callback_query(F.data == 'stations_info')
# async def send_more_info_stations(call: CallbackQuery):
#     # await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
#     ans = "answer"
#     await call.message.answer(ans)


@start_router.callback_query(F.data == 'back_home')
async def main_menu_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    # await call.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
    await call.message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞",
                              reply_markup=main_kb())
