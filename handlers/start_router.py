from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile
from data_base.dao import set_user, get_all_users, get_member_id_by_id
from keyboards.reply_other_kb import main_kb, quest_kb, main_register2
from utils.utils import get_content_info, send_message_user
from create_bot import bot


start_router = Router()

class Form(StatesGroup):
    name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user = None # await cheak_user(tg_id=message.from_user.id,
                        #   username=message.from_user.username,
                        #   full_name=message.from_user.full_name)
    greeting = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    if user is None:
        greeting = f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–∞–∫ –≤—ã –±—É–¥–∏—Ç–µ –≤–∏–¥–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤)"
        
        await state.set_state(Form.name)
        
        await message.answer(greeting, reply_markup=None)
    else:
        await message.answer(greeting, reply_markup=main_register2())

@start_router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: Message, state: FSMContext):
    await state.clear()
    user = await get_member_id_by_id(message.from_user.id)
    print(f'user{message.from_user.id}::', user)
    
    try:
        await message.answer(f'–í–∞—à id:{user['member_id']} \n–í–∞—à —Å—á—ë—Ç:{user['score']} \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
                            reply_markup=main_register2())
    except Exception as e:
        print('total error::', e)
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                            reply_markup=main_register2())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
@start_router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(name=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    user = await set_user(tg_id=message.from_user.id,
                          username=message.from_user.username,
                          full_name=name)
    print('user::', user)
    await message.answer(f"\"{name}\", –≤–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å! –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID {user['member_id']}, –∑–∞–ø–æ–º–Ω–∏—Ç–µ –µ–≥–æ. ID –Ω—É–∂–µ–Ω –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –∫–≤–µ—Å—Ç–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ \"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\"")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ





@start_router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def start_register(message: Message, state: FSMContext):
    await state.clear()
    content_info = get_content_info(message)
    text = f'{message.from_user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ... '
    if content_info.get('content_type'):
        await state.update_data(**content_info)
        await send_message_user(
            bot=bot, 
            content_type=content_info['content_type'], 
            content_text=text,
            user_id=message.from_user.id, 
            kb=main_register2()
        )
        await message.answer('–í–∞—à id:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                            reply_markup=main_register2())


@start_router.message(F.text == '–ö–∞—Ä—Ç–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def start_map(message: Message, state: FSMContext):
    await state.clear()
    text = "12:30 ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ \n13:00 ‚Äì –∫–µ–π—Ç–µ—Ä–∏–Ω–≥ \n13:20 ‚Äì –∫–æ–Ω–∫—É—Ä—Å—ã"
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    photo_path = "map.jpg"
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    photo = FSInputFile(photo_path)
    
    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=main_register2()
    )

@start_router.message(F.text == 'FAQ')
async def start_faq(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å—é–¥–∞: @Ivangogis',
                        reply_markup=main_register2())   


@start_router.message(F.text == '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
async def start_faq(message: Message, state: FSMContext):
    await state.clear()
    users = await get_all_users()
    # print("users::::::::", users)
    str_val = ""
    for user in users:
        # print("user::::::::", user)
        str_val += f"{user['full_name']} {user['member_id']} {user['score']} \n"
    await message.answer('10 –ª—É—á—à–∏—Ö —á–∞—Å—Ç–Ω–∏–∫–æ–≤: \n' + str_val,
                        reply_markup=main_register2())   



@start_router.message(F.text == 'DeleteDataBase')
async def stop_fsm(message: Message, state: FSMContext):
    await state.clear()
    # await delete_all_users()
    await message.answer(f"–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ",
                        reply_markup=main_register2())

@start_router.message(F.text == '–ö–≤–µ—Å—Ç')
async def quest_0(message: Message, state: FSMContext):
    await state.clear()
    text = "12:30 ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ \n13:00 ‚Äì –∫–µ–π—Ç–µ—Ä–∏–Ω–≥ \n13:20 ‚Äì –∫–æ–Ω–∫—É—Ä—Å—ã"
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    photo_path = "map.jpg"
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    photo = FSInputFile(photo_path)
    
    await message.answer(text, reply_markup=quest_kb())

@start_router.message(F.text == '–ö–≤–µ—Å—Ç')
async def quest_0(message: Message, state: FSMContext):
    await state.clear()
    text = "–≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤"
    
    await message.answer(text, reply_markup=quest_kb())

@start_router.message(F.text == '–ö–≤–µ—Å—Ç 1')
async def quest_1(message: Message, state: FSMContext):
    await state.clear()
    text = "–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 1"
    
    await message.answer(text, reply_markup=quest_kb())

@start_router.message(F.text == '–ö–≤–µ—Å—Ç 2')
async def quest_2(message: Message, state: FSMContext):
    await state.clear()
    text = "–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 2"
    
    await message.answer(text, reply_markup=quest_kb())
    
@start_router.callback_query(F.data == 'main_menu')
async def main_menu_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
    await call.message.answer(f"–ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                              reply_markup=main_register2())
