from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from data_base.dao import set_user, get_all_users
from keyboards.reply_other_kb import main_kb, main_register, main_register2
from utils.utils import get_content_info, send_message_user
from create_bot import bot


start_router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@start_router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user = await set_user(tg_id=message.from_user.id,
                          username=message.from_user.username,
                          full_name=message.from_user.full_name)
    greeting = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    if user is None:
        greeting = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        await message.answer(greeting, reply_markup=main_register())
    else:
        await message.answer(greeting, reply_markup=main_register2())



@start_router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def start_register(message: Message, state: FSMContext):
    await state.clear()
    content_info = get_content_info(message)
    text = f'{message.from_user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ... '
    if content_info.get('content_type'):
        await state.update_data(**content_info)
        await send_message_user(
            bot=bot, 
            content_type=content_info['content_type'], 
            content_text=text,
            user_id=message.from_user.id, 
            kb=main_register2()
        )
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                            reply_markup=main_register2())


@start_router.message(F.text == '–ö–∞—Ä—Ç–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def start_map(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('*–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–∞—Ä—Ç–∞* \n12:30 ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ \n13:00 ‚Äì –∫–µ–π—Ç–µ—Ä–∏–Ω–≥ \n13:20 ‚Äì –∫–æ–Ω–∫—É—Ä—Å—ã ',
                        reply_markup=main_register2())

@start_router.message(F.text == 'FAQ')
async def start_faq(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å—é–¥–∞: @laterner',
                        reply_markup=main_register2())   


@start_router.message(F.text == '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
async def start_faq(message: Message, state: FSMContext):
    await state.clear()
    users = await get_all_users()
    # print("users::::::::", users)
    str_val = ""
    for user in users:
        # print("user::::::::", user)
        str_val += f"{user['member_id']} | {user['full_name']} | {user['score']} \n"
    await message.answer('10 –ª—É—á—à–∏—Ö —á–∞—Å—Ç–Ω–∏–∫–æ–≤: \n' + str_val,
                        reply_markup=main_register2())   



@start_router.message(F.text == '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π')
async def stop_fsm(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ",
                        reply_markup=main_register2())


@start_router.callback_query(F.data == 'main_menu')
async def main_menu_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
    await call.message.answer(f"–ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                              reply_markup=main_register2())
